model LamparaLED

class Lampara
    attributes
        encendida : Boolean init: false
        minPotencia : Integer init: 1
        maxPotencia : Integer init: 5
        potencia : Integer init: self.minPotencia
    operations
        encenderOApagar()
            begin
                self.encendida := not(self.encendida)
            end
            post cambioDeActivacion: 
                self.encendida = not(self.encendida@pre)
        
        reducirPotencia()
            begin
                self.potencia := self.potencia - 1;
            end
            pre valorReducible: 
                self.encendida and self.potencia > self.minPotencia
            post potenciaReducida: 
                self.potencia = self.potencia@pre - 1

        _valorReducible_reducirPotencia() : Boolean = 
            self.encendida and self.potencia > self.minPotencia

        aumentarPotencia()
            begin
                self.potencia := self.potencia + 1;
            end
            pre valorAumentable: 
                self.encendida and self.potencia < self.maxPotencia
            post potenciaAumentada: 
                self.potencia = self.potencia@pre + 1

        _valorAumentable_aumentarPotencia() : Boolean = 
            self.encendida and self.potencia < self.maxPotencia

        _potenciaEnRango() : Boolean = self.potencia >= 
            self.minPotencia and self.potencia <= self.maxPotencia

    constraints
        inv potenciaEnRango:
            self.potencia >= self.minPotencia 
                and self.potencia <= self.maxPotencia
    end

class _Test
    operations
        test(n : Integer)
            begin
                declare lamp : Lampara;
                lamp := new Lampara();

                for i in Sequence{1..n} do
                    if lamp._potenciaEnRango() then
                        lamp.encenderOApagar();

                        if lamp._valorReducible_reducirPotencia() then
                            lamp.reducirPotencia();
                        end;

                        if lamp._valorAumentable_aumentarPotencia() then
                            lamp.aumentarPotencia();
                        end;
                    end;
                end;
            end
    end